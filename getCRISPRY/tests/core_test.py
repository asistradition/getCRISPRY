import sys
import tempfile
import shutil
import os
import unittest

sys.path.insert(0, "../")

from getCRISPRY.lib.grna_scorer import GetCRISPRs, get_candidates
from getCRISPRY.cutters.cas9 import cas9
from getCRISPRY.lib.bowtie2 import bowtie_get_hits, bowtie_make_index
from getCRISPRY.lib.degenerate_tools import fix_seq_object, fix_seq_object_list

from Bio import SeqIO

CAS9_TEST = [("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGAATGG", 1),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGAAGGG", 1),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGAATCG", 0.107142857),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGAATGA", 0.069444444),
             ("ACCCTGTTCTTTTGACTGAA", "ACCTTGTTCTTTTGACTGAATGG", 0.8),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTCAAGACTGAATGG", 0.36923076925128206),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTGTTCACTGAATGG", 0.17142857160000002),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGAATGC", 0.022222222),
             ("ACCCTGTTCTTTTGACTGAA", "GCCCTGTTCTTTTGACTGAATGG", 1),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGACTGCATGG", 0.206896552),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGAGTGAATGG", 0.153846154),
             ("ACCCTGTTCTTTTGACTGAA", "ACCCTGTTCTTTTGAGTGAATAA", 0),
             ("ACCCTGTTCTTTTGACTGAA", "ATCCTGTTCTTTTGACTGTATGG", 0.489510489041958),
             ("ATGTTTAGAGGTTGCTGCTT", "TAATTTTGAAATTGCTGCTTTGG", 0.2591346152449519)]

GENOMIC_TEST = "ATGGATTCTGGTATGTTCTAGCGCTTGCACCATCCCATTTAACTGTAAGAAGAATTGCACGGTCCCAATTGCTCGATTCGAACTCTTGCATCTTACGAGATTTCTCTTTTACCTTTTTTTACTATTTTTCACTCTCCCATAACCTCCTATATTGACTGATCTGTAATAACCACGATATTATTGGAATAAATAGGGGCTTGAAATTTGGAAAAAAAAAAAAAACTGAAATATTTTCGTGAGTAAGATGCAAGAGTTCGAATAAGTGATAGTGATATTCTTCTTTTATTTGCTACTGTTACTAAGTCTCATGTACTAACATCGATTGCTTCATTCTTTTTGTTGCTATATTATATGTTTAGAGGTTGCTGCTTTGGTTATTGATAACGGTTCTGGTATGTGTAAAGCCGGTTTTGCCGGTGACGACGCTCCTCGTGCTGTCTTCCCATCTATCGTCGGTAGACCAAGACACCAAGGTATCATGGTCGGTATGGGTCAAAAAGACTCCTACGTTGGTGATGAAGCTCAATCCAAGAGAGGTATCTTGACTTTACGTTACCCAATTGAACACGGTATTGTCACCAACTGGGACGATATGGAAAAGATCTGGCATCATACCTTCTACAACGAATTGAGAGTTGCCCCAGAAGAACACCCTGTTCTTTTGACTGAAGCTCCAATGAACCCTAAATCAAACAGAGAAAAGATGACTCAAATTATGTTTGAAACTTTCAACGTTCCAGCCTTCTACGTTTCCATCCAAGCCGTTTTGTCCTTGTACTCTTCCGGTAGAACTACTGGTATTGTTTTGGATTCCGGTGATGTTCGAACTCTTGCATCTTACGTGTTACTCACGTCGTTCCAATTTACGCTGGTTTCTCTCTACCTCACGCCATTTTGAGAATCGATTTGGCCGTAAGATGCAAGAGTCCGAAGGTAGAGATTTGACTGACTACTTGATGAAGATCTTGAGTGAACGTGGTTACTCTTTCTCCACCACTGCTGAAAGAGAAATTGTCCGTGACATCAAGGAAAAACTATGTTACGTCGCCTTGGACTTCGAACAAGAAATGCAAACCGCTGCTCAATCTTCTTCAATTGAAAAATCCTACGAACTTCCAGATGGTCAAGTCATCACTATTGGTAACGAAAGATTCAGAGCCCCAGAAGCTTTGTTCCATCCTTCTGTTTTGGGTTTGGTAAGATGCAAGAGTTCGAAGAATCTGCCGGTATTGACCAAACTACTTACAACTCCATCATGAAGTGTGATGTCGATGTCCGTAAGGAATTATACGGTAACATCGTTATGTCCGGTGGTACCACCATGTTCCCAGGTATTGCCGAAAGAATGCAAAAGGAAATCACCGCTTTGGCTCCATCTTCCATGAAGGTCAAGATCATTGCTCCTCCAGAAAGAAAGTACTCCGTCTGGATTGGTGGTTCTATCTTCGAACTCTTGCATCTTACTTGGCTTCTTTGACTACCTTCCAACAAATGTGGATCTCAAAACAAGAATACGACGAAAGTGGTCCATCTATCGTTCACCACAAGTGTTTCTAA"
BOWTIE_QUERY = ["GTAAGATGCAAGAGTTCGAA", "ACTCTTGCATCTTACGAGAT"]
CAS9_GENOMIC_SITES = 131

REGION_CAS9_FINDER_TEST_SEQ = "ATGGATTCTGGTATGTTCTAGCGCTTGCACCATCCCATTTAACTGTAAGAAGAATTGCACGGTCCCAATTGCTCGAGAGATTTCTCTTTTACCTTTTTTTACTATTTTTCACTCTCCCATAACCTCCTATATTGACTGATCTGTAATAACCACGATATTATTGGAATAAATAGGGGCTTGAAATTTGGAAAAAAAAAAAAAACTGAAATATTTTCGTGATAAGTGATAGTGATATTCTTCTTTTATTTGCTACTGTTACTAAGTCTCATGTACTAACATCGATTGCTTCATTCTTTTTGTTGCTATATTATATGTTTAGAGGTTGCTGCTTTGGTTATTGATAACGGTTCTGGTATGTGTAAAGCCGGTTTTGCCGGTGACGACGCTCCTCGTGCTGTCTTCCCATCTATCGTCGGTAGACCAAGACACCAAGGTATCATGGTCGGTATGGGTCAAAAAGACTCCTACGTTGGTGATGAAGCTCAATCCAAGAGAGGTATCTTGACTTTACGTTACCCAATTGAACACGGTATTGTCACCAACTGGGACGATATGGAAAAGATCTGGCATCATACCTTCTACAACGAATTGAGAGTTGCCCCAGAAGAACACCCTGTTCTTTTGACTGAAGCTCCAATGAACCCTAAATCAAACAGAGAAAAGATGACTCAAATTATGTTTGAAACTTTCAACGTTCCAGCCTTCTACGTTTCCATCCAAGCCGTTTTGTCCTTGTACTCTTCCGGTAGAACTACTGGTATTGTTTTGGATTCCGGTGATGGTGTTACTCACGTCGTTCCAATTTACGCTGGTTTCTCTCTACCTCACGCCATTTTGAGAATCGATTTGGCCGGTAGAGATTTGACTGACTACTTGATGAAGATCTTGAGTGAACGTGGTTACTCTTTCTCCACCACTGCTGAAAGAGAAATTGTCCGTGACATCAAGGAAAAACTATGTTACGTCGCCTTGGACTTCGAACAAGAAATGCAAACCGCTGCTCAATCTTCTTCAATTGAAAAATCCTACGAACTTCCAGATGGTCAAGTCATCACTATTGGTAACGAAAGATTCAGAGCCCCAGAAGCTTTGTTCCATCCTTCTGTTTTGGGTTTGGAATCTGCCGGTATTGACCAAACTACTTACAACTCCATCATGAAGTGTGATGTCGATGTCCGTAAGGAATTATACGGTAACATCGTTATGTCCGGTGGTACCACCATGTTCCCAGGTATTGCCGAAAGAATGCAAAAGGAAATCACCGCTTTGGCTCCATCTTCCATGAAGGTCAAGATCATTGCTCCTCCAGAAAGAAAGTACTCCGTCTGGATTGGTGGTTCTATCTTGGCTTCTTTGACTACCTTCCAACAAATGTGGATCTCAAAACAAGAATACGACGAAAGTGGTCCATCTATCGTTCACCACAAGTGTTTCTAA"
SPECIFIC_OFFTARGET_TEST_SEQ = "ATGTTTAGAGGTTGCTGCTTTGG"
REGION_CAS9_FINDER_TEST_INDEX = os.path.join("..", "bowtie_sc", "sc_genome")


class TestCutter(unittest.TestCase):

    def test_cas9_score(self, verbose=False):

        for guide, target, expect_score in CAS9_TEST:
            score = cas9.off_target_score(guide, target)
            if verbose:
                print("{}\t{}\t{}".format(guide, target, score))

            assert score == expect_score

        try:
            cas9.acceptable_sequence("AATTGCTTAATTTGACTGAACGG")
            assert False
        except ValueError:
            assert True

        if verbose:
            print("Cas9 scoring module passed")

class TestBowtie(unittest.TestCase):

    def test_bowtie(self, verbose=False):
        genome = fix_seq_object(GENOMIC_TEST, make_type="seqrecord")
        genome.id = "Genome"
        query = fix_seq_object_list(BOWTIE_QUERY, make_type="seqrecord")

        try:
            _hand, _name = tempfile.mkstemp()
            _dir = tempfile.mkdtemp()

            with open(_hand, mode="w") as temp_fh:
                SeqIO.write(genome, temp_fh, format="fasta")

            matches = bowtie_get_hits(query, bowtie_make_index(_dir, _name))

            for q_seq, hits in matches.items():
                for map_seq, chrn, pos, strand, nm in hits:
                    if verbose:
                        print("\t".join(map(str, [q_seq, chrn, pos, strand, nm, map_seq])))

        finally:
            try:
                shutil.rmtree(_dir)
            except UnboundLocalError:
                pass
            try:
                os.remove(_name)
            except UnboundLocalError:
                pass

        if verbose:
            print("Bowtie search module passed")


class GuideFinderTest(unittest.TestCase):
    def test_grna_finder(self, verbose=False):
        grnas = get_candidates(GENOMIC_TEST)

        for seq in grnas:
            for start, stop, strand in grnas[seq]:
                if verbose:
                    print("{}\t{}\t{}\t{}".format(start, stop, strand, seq))

        assert len(grnas) == CAS9_GENOMIC_SITES
        if verbose:
            print("Cut site location module passed")


    def test_grna_optimal_locator(self, verbose=False):
        try:
            _, grnas = GetCRISPRs(REGION_CAS9_FINDER_TEST_INDEX,
                               verbose=verbose).find_grna(fix_seq_object(REGION_CAS9_FINDER_TEST_SEQ, make_type="seqrecord"))
            for target_seq, target_score, target_offtarget in grnas:
                if verbose:
                    print("{}\t{}\t{}".format(target_seq, target_score, target_offtarget))
            assert len(grnas) == 101
            assert grnas[0][0] == "AAAACTATGTTACGTCGCCTTGG"
            if verbose:
                print("Offtarget search module passed")
        except FileNotFoundError as err:
            print("Offtarget search module test skipped:\t{}".format(str(err)))

if __name__ == '__main__':
    unittest.main()
